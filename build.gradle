/*
 * MIT License
 * 
 * Copyright (c) 2017-2019 Elena Lakhno
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'org.kordamp.gradle.build-scan' version '0.17.0'
    id 'org.kordamp.gradle.project'    version '0.17.0'
    id 'org.kordamp.gradle.plugin'     version '0.17.0' apply false
}

buildScan {
    termsOfServiceAgree = 'yes'
    publishAlways()
}

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name          = rootProject.name
        vendor        = 'Bruno Borges'
        description   = 'Azure Gradle Plugins'
        inceptionYear = '2017'
        tags          = ['azure']

        links {
            website      = 'https://github.com/brunoborges/azure-gradle-plugins'
            issueTracker = 'https://github.com/brunoborges/azure-gradle-plugins/issues'
            scm          = 'https://github.com/brunoborges/azure-gradle-plugins.git'
        }

        specification {
            enabled = false
        }

        implementation {
            enabled = false
        }

        people {
            person {
                id    = 'lenala'
                name  = 'Elena Lakhno'
                roles = ['developer', 'author']
            }
            person {
                id    = 'burnoborges'
                name  = 'Bruno Borges'
                roles = ['developer', 'author']
            }
            person {
                id    = 'aalmiray'
                name  = 'Andres Almiray'
                roles = ['contributor']
            }
        }
    }

    javadoc {
        enabled = false
    }

    groovydoc {
        enabled        = true
        replaceJavadoc = true
        options {
            link 'https://docs.gradle.org/5.0/javadoc/', 'org.gradle.'
        }
    }

    licensing {
        licenses {
            license {
                id = 'MIT'
            }
        }

        enabled = false
    }

    bintray { enabled = false }
}

allprojects {
    apply plugin: 'idea'

    repositories {
        jcenter()
        gradlePluginPortal()
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

subprojects {
    if (project.name.endsWith('-plugin')) {
        apply plugin: 'groovy'
        apply plugin: 'org.kordamp.gradle.plugin'

        config {
            info {
                description = project.projectDescription
            }

            plugin {
                enabled             = true
                id                  = project.pluginId
                implementationClass = project.pluginImplementationClass
            }

            jacoco {
                enabled = project.file('src/test').exists()
            }
        }

        normalization {
            runtimeClasspath {
                ignore('/META-INF/MANIFEST.MF')
            }
        }

        compileGroovy {
            sourceCompatibility = project.sourceCompatibility
            targetCompatibility = project.targetCompatibility
        }

        dependencies {
            compile gradleApi()
            compile "com.microsoft.azure:azure:$azureVersion"
            compile "commons-net:commons-net:$commonsNetVersion"
            compile "commons-io:commons-io:$commonsIoVersion"
            compile "org.zeroturnaround:zt-zip:$ztZipVersion"
            compile "io.github.classgraph:classgraph:$classgraphVersion"


            testCompile gradleTestKit()
            testCompile "junit:junit:$junitVersion"
        }
    }
}